import { createSlice } from '@reduxjs/toolkit';


export const restart = function(x=10,y=10,mines=10) {
  let board = [];
  if(mines >= x*y) {mines = x*y-5}
  for(let i = 0; i < x; i++) {
    let row = [];
    for (let j = 0; j < y; j++) {
      row.push({ value: "", revealed: false, x: i, y: j })
    }
    board.push(row)
  }
  while (mines > 0) {
    let a = Math.floor(Math.random() * (x-1))
    let b = Math.floor(Math.random() * (y-1))
    if(board[a][b].value !== "*") {
      board[a][b].value = "*"
      mines--
    }
  }
  board.forEach((row,x) => row.forEach((cell, y) => {
    if(cell.value === "*") {
      let xCoord = [x-1, x, x+1]
      let yCoord = [y-1, y, y+1]
      for (let a of xCoord) {
        for (let b of yCoord) {
          if(board[a] && board[a][b]) {
            if(board[a][b].value !== '*') {
              board[a][b].value === '' ? board[a][b].value = 1 : board[a][b].value++
            }
          }
        }
      }
    }
  }))
  return board
}
let board = restart();
const initialState = {
  board,
  revealedCells: 0,
  gameOver: false,
  x: 10,
  y: 10,
  mines: 10
};
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );


export const boardSlice = createSlice({
  name: 'board',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reset: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.board = restart(state.x,state.y,state.mines);
      state.gameOver = false;
      state.revealedCells = 0;

    },
    gameOver: (state) => {
      state.gameOver = true;
      state.board.forEach(row => row.forEach(cell => {
        cell.revealed = true
      }));
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    increment: (state) => {
      state.revealedCells += 1;
    },
    reveal: (state, action) => {
      const recurse = (x, y) => {
        if (!state.board[x][y].revealed) {
          state.revealedCells++
          state.board[x][y].revealed = true;
          if (state.board[x][y].value === "") {
            let xCoords = [x - 1, x, x + 1]
            let yCoords = [y - 1, y, y + 1]
            for (let a of xCoords) {
              for (let b of yCoords) {
                if (state.board[a] && state.board[a][b]) {
                  recurse(a, b)
                }
              }
            }
          }
        }
      }
      recurse(action.payload.x, action.payload.y)
    },
    changeX: (state,action) => {
      state.x = action.payload
    },
    changeY: (state,action) => {
      state.y = action.payload
    },
    changeMines: (state,action) => {
      state.mines = action.payload
    },
    revealAll: (state) => {
      state.board.forEach(row => row.forEach(cell => {
        cell.revealed = true
      }));
    }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { reset, gameOver, increment, reveal, changeX, changeY, changeMines, revealAll } = boardSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectBoard = (state) => state.board.board;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default boardSlice.reducer;
